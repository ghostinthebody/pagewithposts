import { useCallback, useContext, useEffect, useMemo, useRef, useState } from "react";


// Хуки. Функции которые можно использовать в функциональных компонентах(Counter.jsx) либо в своих собственных хуках
useState();
// Позволяет добавить состояние в функциональный компонент. ЧЭНЗ.
useEffect();
// Жизнь компонента: 1) монтирование 2) изменение 3) демонтировани. Этот хук помогает эти этапы отследить.  (похож на useMemo. Есть коллбек и массив зависимостей)
useRef();
// Можем получить доступ к DOM элементу и уже у этого элемента забрать какой нибудь параметр (например: value)      Вопрос! А зачем нужен "неуправляемый" компонент когда есть "управляемый"?
useMemo();
// 1:16:00 "она сортирует массив и кэширует результат" так блять тоже самое мы и без её ебанного кэша могли сделать. Ну не может же она кэшировать всё на свете без каких либо проблем с вычеслительными мощностями. 
useCallback();
useContext();
// можно создавать некоторые глобальные данные. И получать к ним доступ из любого компонента и любого уровня вложенности(что бы не прокидывать данные коллбеками)

